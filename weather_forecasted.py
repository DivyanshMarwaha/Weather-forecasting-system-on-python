# -*- coding: utf-8 -*-
"""Weather Forecasted.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1vI7WBWiCsKmXavna3yFzl-qV9UNGNUjN
"""

pip install requests beautifulsoup4

pip install matplotlib

import requests
import matplotlib.pyplot as plt

def get_weather(city, unit='C'):
    base_url = f"http://wttr.in/{city}?format=j1"
    response = requests.get(base_url)

    if response.status_code == 200:
        data = response.json()

        # Current condition
        current_condition = data['current_condition'][0]
        weather_desc = current_condition['weatherDesc'][0]['value']
        temperature = float(current_condition['temp_C']) if unit == 'C' else float(current_condition['temp_F'])
        humidity = int(current_condition['humidity'])
        wind_speed = int(current_condition['windspeedKmph'])

        # Extended forecast
        forecast = data['weather'][0]['hourly']
        temps = [float(hour['tempC']) if unit == 'C' else float(hour['tempF']) for hour in forecast]
        times = [hour['time'] for hour in forecast]

        # Convert time from 24-hour format to 12-hour format
        times = [f"{int(t)//100 % 12 or 12}{'am' if int(t) < 1200 else 'pm'}" for t in times]

        print(f"\nWeather in {city.capitalize()}:")
        print(f"Weather description: {weather_desc}")
        print(f"Temperature: {temperature}°{unit}")
        print(f"Humidity: {humidity}%")
        print(f"Wind speed: {wind_speed} km/h")

        # Current condition bar chart
        labels = [f'Temperature (°{unit})', 'Humidity (%)', 'Wind Speed (km/h)']
        values = [temperature, humidity, wind_speed]

        plt.figure(figsize=(10, 5))
        plt.subplot(1, 2, 1)
        plt.bar(labels, values, color=['blue', 'green', 'red'])
        plt.title(f"Current Weather in {city.capitalize()}")
        plt.ylabel('Values')

        # Extended forecast line chart
        plt.subplot(1, 2, 2)
        plt.plot(times, temps, marker='o')
        plt.title(f"24-Hour Forecast in {city.capitalize()}")
        plt.xlabel('Time')
        plt.ylabel(f'Temperature (°{unit})')
        plt.xticks(rotation=45)

        plt.tight_layout()
        plt.show()
    else:
        print("City Not Found!")

# Example usage
city = input("Enter city name: ")
unit = input("Enter unit (C/F): ").upper()
get_weather(city, unit)